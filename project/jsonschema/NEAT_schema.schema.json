{
   "$defs": {
      "ActivationEnum": {
         "description": "",
         "enum": [
            "linear",
            "relu",
            "sigmoid",
            "tanh",
            "softmax"
         ],
         "title": "ActivationEnum",
         "type": "string"
      },
      "ApplyTrainedModel": {
         "additionalProperties": false,
         "description": "Trained model used for prediction.",
         "properties": {
            "cutoff": {
               "description": "Cutoff filter.",
               "type": "string"
            },
            "model_id": {
               "description": "Key of the model to be used.",
               "type": "string"
            },
            "node_types": {
               "$ref": "#/$defs/NodeType",
               "description": "Type of nodes."
            },
            "outfile": {
               "description": "File path for saving results.",
               "type": "string"
            }
         },
         "required": [],
         "title": "ApplyTrainedModel",
         "type": "object"
      },
      "ApplyTrainedModelsContainer": {
         "additionalProperties": false,
         "description": "A container with multiple classifiers in it.",
         "properties": {
            "models": {
               "description": "Models that need to be used for link prediction.",
               "items": {
                  "$ref": "#/$defs/ApplyTrainedModel"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "ApplyTrainedModelsContainer",
         "type": "object"
      },
      "Classifier": {
         "additionalProperties": false,
         "description": "ML classifiers to be trained-tested-validated and applied for predictions.",
         "properties": {
            "classifier_id": {
               "description": "Key to identify the classifier and associated parameters.",
               "type": "string"
            },
            "classifier_name": {
               "description": "Name of the classifier.",
               "type": "string"
            },
            "classifier_type": {
               "description": "Type of classifier.",
               "type": "string"
            },
            "edge_method": {
               "$ref": "#/$defs/EdgeMethodEnum",
               "description": "Edge method."
            },
            "history_filename": {
               "description": "File name for saving history.",
               "type": "string"
            },
            "outfile": {
               "description": "Fie path for saving output.",
               "type": "string"
            },
            "parameters": {
               "$ref": "#/$defs/ClassifierParams",
               "description": "Parameters to be passed for building classifier."
            }
         },
         "required": [],
         "title": "Classifier",
         "type": "object"
      },
      "ClassifierCallback": {
         "additionalProperties": false,
         "description": "Utilities called at certain points during model training.",
         "properties": {
            "min_delta": {
               "description": "Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.",
               "type": "integer"
            },
            "mode": {
               "$ref": "#/$defs/ClassifierCallbackModeEnum",
               "description": "One of {\"auto\", \"min\", \"max\"}. In min mode, training will stop when the quantity monitored has stopped decreasing; in \"max\" mode it will stop when the quantity monitored has stopped increasing; in \"auto\" mode, the direction is automatically inferred from the name of the monitored quantity."
            },
            "monitor": {
               "description": "Quantity to be monitored.",
               "type": "string"
            },
            "patience": {
               "description": "Number of epochs with no improvement after which training will be stopped.",
               "type": "integer"
            },
            "type": {
               "description": "Type of callback.",
               "type": "string"
            },
            "verbose": {
               "description": "Verbosity mode, 0 or 1. Mode 0 is silent, and mode 1 displays messages when the callback takes an action.",
               "type": "boolean"
            }
         },
         "required": [],
         "title": "ClassifierCallback",
         "type": "object"
      },
      "ClassifierCallbackContainer": {
         "additionalProperties": false,
         "description": "A container of classifier callbacks.",
         "properties": {
            "callbacks": {
               "description": "Callbacks.",
               "items": {
                  "$ref": "#/$defs/ClassifierCallback"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "ClassifierCallbackContainer",
         "type": "object"
      },
      "ClassifierCallbackModeEnum": {
         "description": "Callback modes while fitting a classifier.",
         "enum": [
            "auto",
            "min",
            "max"
         ],
         "title": "ClassifierCallbackModeEnum",
         "type": "string"
      },
      "ClassifierContainer": {
         "additionalProperties": false,
         "description": "A container with multiple classifiers in it.",
         "properties": {
            "classifiers": {
               "description": "Classifier details.",
               "items": {
                  "$ref": "#/$defs/Classifier"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "ClassifierContainer",
         "type": "object"
      },
      "ClassifierFitParams": {
         "additionalProperties": false,
         "description": "Paramters for fitting a classifier.",
         "properties": {
            "batch_size": {
               "type": "integer"
            },
            "callbacks_list": {
               "$ref": "#/$defs/ClassifierCallbackContainer",
               "description": "List of callbacks."
            },
            "epochs": {
               "description": "Number of epochs to run for training.",
               "type": "integer"
            }
         },
         "required": [],
         "title": "ClassifierFitParams",
         "type": "object"
      },
      "ClassifierParams": {
         "additionalProperties": false,
         "description": "Parameters needed to define a classifier.",
         "properties": {
            "sklearn_params": {
               "$ref": "#/$defs/SkLearnParams",
               "description": "Parameters specific to sklearn."
            },
            "tf_keras_params": {
               "$ref": "#/$defs/TFKerasParams",
               "description": "Parameters specific to Tensorflow/Keras"
            }
         },
         "required": [],
         "title": "ClassifierParams",
         "type": "object"
      },
      "EdgeMethodEnum": {
         "description": "",
         "enum": [
            "Average",
            "Hadamard",
            "Sum",
            "L1",
            "L2",
            "AbsoluteL1"
         ],
         "title": "EdgeMethodEnum",
         "type": "string"
      },
      "EmbeddingsConfig": {
         "additionalProperties": false,
         "description": "Embeddings configuration.",
         "properties": {
            "filename": {
               "description": "Embeddings file name.",
               "type": "string"
            },
            "history_filename": {
               "description": "Embeddings history file name.",
               "type": "string"
            },
            "node_embeddings_params": {
               "$ref": "#/$defs/NodeEmbeddingsParams",
               "description": "Node embeddings parameters."
            },
            "tsne_filename": {
               "description": "File name for the TSNE plot.",
               "type": "string"
            }
         },
         "required": [],
         "title": "EmbeddingsConfig",
         "type": "object"
      },
      "EnsmallenRunConfig": {
         "additionalProperties": false,
         "description": "All params used by ensmallen's csv_reader",
         "properties": {
            "default_edge_type": {
               "type": "string"
            },
            "default_node_type": {
               "type": "string"
            },
            "default_weight": {
               "type": "number"
            },
            "destinations_column": {
               "type": "string"
            },
            "destinations_column_number": {
               "type": "integer"
            },
            "directed": {
               "type": "boolean"
            },
            "edge_ids_column": {
               "type": "string"
            },
            "edge_ids_column_number": {
               "type": "integer"
            },
            "edge_list_comment_symbol": {
               "type": "string"
            },
            "edge_list_edge_types_column": {
               "type": "string"
            },
            "edge_list_edge_types_column_number": {
               "type": "integer"
            },
            "edge_list_header": {
               "type": "boolean"
            },
            "edge_list_is_complete": {
               "type": "boolean"
            },
            "edge_list_is_correct": {
               "type": "boolean"
            },
            "edge_list_is_sorted": {
               "type": "boolean"
            },
            "edge_list_max_rows_number": {
               "type": "integer"
            },
            "edge_list_may_contain_duplicates": {
               "type": "boolean"
            },
            "edge_list_numeric_edge_type_ids": {
               "type": "boolean"
            },
            "edge_list_numeric_node_ids": {
               "type": "boolean"
            },
            "edge_list_rows_to_skip": {
               "type": "integer"
            },
            "edge_list_separator": {
               "type": "string"
            },
            "edge_path": {
               "type": "string"
            },
            "edge_type_list_comment_symbol": {
               "type": "string"
            },
            "edge_type_list_header": {
               "type": "boolean"
            },
            "edge_type_list_is_correct": {
               "type": "boolean"
            },
            "edge_type_list_max_rows_number": {
               "type": "integer"
            },
            "edge_type_list_rows_to_skip": {
               "type": "integer"
            },
            "edge_type_list_separator": {
               "type": "string"
            },
            "edge_type_path": {
               "type": "string"
            },
            "edge_types_column": {
               "type": "string"
            },
            "edge_types_column_number": {
               "type": "integer"
            },
            "edge_types_ids_column": {
               "type": "string"
            },
            "edge_types_ids_column_number": {
               "type": "integer"
            },
            "edge_types_number": {
               "type": "integer"
            },
            "edges_number": {
               "type": "integer"
            },
            "load_edge_list_in_parallel": {
               "type": "boolean"
            },
            "load_edge_type_list_in_parallel": {
               "type": "boolean"
            },
            "load_node_list_in_parallel": {
               "type": "boolean"
            },
            "load_node_type_list_in_parallel": {
               "type": "boolean"
            },
            "may_have_singleton_with_selfloops": {
               "type": "boolean"
            },
            "may_have_singletons": {
               "type": "boolean"
            },
            "minimum_edge_type_id": {
               "type": "integer"
            },
            "minimum_node_id": {
               "type": "integer"
            },
            "minimum_node_type_id": {
               "type": "integer"
            },
            "name": {
               "type": "string"
            },
            "node_ids_column": {
               "type": "string"
            },
            "node_ids_column_number": {
               "type": "integer"
            },
            "node_list_comment_symbol": {
               "type": "string"
            },
            "node_list_header": {
               "type": "boolean"
            },
            "node_list_is_correct": {
               "type": "boolean"
            },
            "node_list_max_rows_number": {
               "type": "integer"
            },
            "node_list_node_types_column": {
               "type": "string"
            },
            "node_list_node_types_column_number": {
               "type": "integer"
            },
            "node_list_numeric_node_type_ids": {
               "type": "boolean"
            },
            "node_list_rows_to_skip": {
               "type": "integer"
            },
            "node_list_separator": {
               "type": "string"
            },
            "node_path": {
               "type": "string"
            },
            "node_type_list_comment_symbol": {
               "type": "string"
            },
            "node_type_list_header": {
               "type": "boolean"
            },
            "node_type_list_is_correct": {
               "type": "boolean"
            },
            "node_type_list_max_rows_number": {
               "type": "integer"
            },
            "node_type_list_rows_to_skip": {
               "type": "integer"
            },
            "node_type_list_separator": {
               "description": "The separator to use for the node types file.",
               "type": "string"
            },
            "node_type_path": {
               "description": "The path to the file with the unique node type names.",
               "type": "string"
            },
            "node_types_column": {
               "type": "string"
            },
            "node_types_column_number": {
               "type": "integer"
            },
            "node_types_ids_column": {
               "type": "string"
            },
            "node_types_ids_column_number": {
               "type": "integer"
            },
            "node_types_number": {
               "type": "integer"
            },
            "node_types_separator": {
               "type": "string"
            },
            "nodes_column": {
               "type": "string"
            },
            "nodes_column_number": {
               "type": "integer"
            },
            "nodes_number": {
               "description": "JsonObj(range='integer')",
               "type": "string"
            },
            "numeric_edge_type_ids": {
               "type": "boolean"
            },
            "numeric_node_ids": {
               "type": "boolean"
            },
            "numeric_node_type_ids": {
               "type": "boolean"
            },
            "skip_edge_types_if_unavailable": {
               "type": "boolean"
            },
            "skip_node_types_if_unavailable": {
               "type": "boolean"
            },
            "skip_weights_if_unavailable": {
               "type": "boolean"
            },
            "sources_column": {
               "type": "string"
            },
            "sources_column_number": {
               "type": "integer"
            },
            "verbose": {
               "type": "boolean"
            },
            "weights_column": {
               "type": "string"
            },
            "weights_column_number": {
               "type": "integer"
            }
         },
         "required": [],
         "title": "EnsmallenRunConfig",
         "type": "object"
      },
      "GraphDataConfiguration": {
         "additionalProperties": false,
         "description": "Configuration for the graph training and validation data for ML pipeline.",
         "properties": {
            "data": {
               "$ref": "#/$defs/TrainValidData",
               "description": "Input data for pipeline."
            },
            "graph": {
               "$ref": "#/$defs/EnsmallenRunConfig",
               "description": "Graph configuration for pipeline"
            }
         },
         "required": [],
         "title": "GraphDataConfiguration",
         "type": "object"
      },
      "Layer": {
         "additionalProperties": false,
         "description": "Layers for a neural network.",
         "properties": {
            "parameters": {
               "$ref": "#/$defs/LayerParams"
            },
            "type": {
               "description": "Type of layer.",
               "type": "string"
            }
         },
         "required": [],
         "title": "Layer",
         "type": "object"
      },
      "LayerContainer": {
         "additionalProperties": false,
         "description": "A container of neural network layers.",
         "properties": {
            "layers": {
               "description": "List of layers to be used to build the neural network.",
               "items": {
                  "$ref": "#/$defs/Layer"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "LayerContainer",
         "type": "object"
      },
      "LayerParams": {
         "additionalProperties": false,
         "description": "Parameters for each layer of a neural network.",
         "properties": {
            "activation": {
               "$ref": "#/$defs/ActivationEnum",
               "description": "Activation layer type"
            },
            "rate": {
               "type": "number"
            },
            "units": {
               "type": "integer"
            }
         },
         "required": [],
         "title": "LayerParams",
         "type": "object"
      },
      "Metric": {
         "additionalProperties": false,
         "description": "Metrics of a trained classifier (model).",
         "properties": {
            "curve": {
               "description": "Area under curve (AUC) to be calculated.",
               "type": "string"
            },
            "name": {
               "type": "string"
            },
            "type": {
               "type": "string"
            }
         },
         "required": [],
         "title": "Metric",
         "type": "object"
      },
      "MetricContainer": {
         "additionalProperties": false,
         "description": "A container of metrics for a trained classifier.",
         "properties": {
            "metrics": {
               "description": "A list of metrics need to train a classifier.",
               "items": {
                  "$ref": "#/$defs/Metric"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "MetricContainer",
         "type": "object"
      },
      "NeatConfiguration": {
         "additionalProperties": false,
         "description": "Root class for the schema.",
         "properties": {
            "graph_data": {
               "$ref": "#/$defs/GraphDataConfiguration",
               "description": "Configuration for graph data."
            }
         },
         "required": [],
         "title": "NeatConfiguration",
         "type": "object"
      },
      "NodeEmbedMethodEnum": {
         "description": "",
         "enum": [
            "SkipGram",
            "CBOW",
            "GloVe",
            "Siamese",
            "TransE",
            "SimplE",
            "TransH",
            "TransR"
         ],
         "title": "NodeEmbedMethodEnum",
         "type": "string"
      },
      "NodeEmbeddingsParams": {
         "additionalProperties": false,
         "description": "Node embeddings parameters.",
         "properties": {
            "batch_size": {
               "description": "Number of nodes to include in a single batch.",
               "type": "integer"
            },
            "explore_weight": {
               "description": "Weight on the probability of visiting a neighbor node to the one we're coming from in the random walk Having this higher tends the walks to be more like a Depth-First Search. Having this very high makes search more outward. Having this very low makes search very local. Equal to the inverse of q in the Node2Vec paper.",
               "type": "number"
            },
            "iterations": {
               "description": "Number of iterations.",
               "type": "integer"
            },
            "method_name": {
               "$ref": "#/$defs/NodeEmbedMethodEnum",
               "description": "Name of the node embedding method."
            },
            "return_weight": {
               "description": "Weight on the probability of returning to the same node the walk just came from Having this higher tends the walks to be more like a Breadth-First Search. Having this very high  (> 2) makes search very local. Equal to the inverse of p in the Node2Vec paper.",
               "type": "number"
            },
            "walk_length": {
               "description": "Maximal length of the walks.",
               "type": "integer"
            },
            "window_size": {
               "description": "Size of the context and target nodes for node2vec.",
               "type": "integer"
            }
         },
         "required": [],
         "title": "NodeEmbeddingsParams",
         "type": "object"
      },
      "NodeType": {
         "additionalProperties": false,
         "description": "Source node or Destination node.",
         "properties": {
            "destination": {
               "description": "Destination node(s).",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "source": {
               "description": "Source node(s).",
               "items": {
                  "type": "string"
               },
               "type": "array"
            }
         },
         "required": [],
         "title": "NodeType",
         "type": "object"
      },
      "OptimizerEnum": {
         "description": "Optimizers that can be implemented in the neural network.",
         "enum": [
            "adagrad",
            "adam",
            "adamax",
            "nadam",
            "sgd"
         ],
         "title": "OptimizerEnum",
         "type": "string"
      },
      "PosNegData": {
         "additionalProperties": false,
         "description": "File paths for positive an negative edge data.",
         "properties": {
            "neg_edge_filepath": {
               "description": "Negative edges file path.",
               "type": "string"
            },
            "pos_edge_filepath": {
               "description": "Positive edges file path.",
               "type": "string"
            }
         },
         "required": [],
         "title": "PosNegData",
         "type": "object"
      },
      "SkLearnParams": {
         "additionalProperties": false,
         "description": "Parameters specific to the SKLearn library.",
         "properties": {
            "max_iter": {
               "description": "Maximum iterations.",
               "type": "integer"
            },
            "random_state": {
               "description": "Random seed.",
               "type": "integer"
            }
         },
         "required": [],
         "title": "SkLearnParams",
         "type": "object"
      },
      "TFKerasParams": {
         "additionalProperties": false,
         "description": "Parameters specific to the Tensorflow Keras library.",
         "properties": {
            "fit_config": {
               "$ref": "#/$defs/ClassifierFitParams",
               "description": "Configuration for model fitting."
            },
            "layers_config": {
               "$ref": "#/$defs/LayerContainer",
               "description": "Configuration for instantiating layers for neural networks."
            },
            "loss": {
               "description": "Loss function.",
               "type": "string"
            },
            "metrics_config": {
               "$ref": "#/$defs/MetricContainer",
               "description": "Metrics to be calculated after classifier training."
            },
            "optimizer": {
               "$ref": "#/$defs/OptimizerEnum",
               "description": "Optimizer function to be used during classifier training."
            }
         },
         "required": [],
         "title": "TFKerasParams",
         "type": "object"
      },
      "Target": {
         "additionalProperties": false,
         "description": "Path for output to be saved.",
         "properties": {
            "target_path": {
               "description": "File path for saving results.",
               "type": "string"
            }
         },
         "required": [],
         "title": "Target",
         "type": "object"
      },
      "TrainValidData": {
         "additionalProperties": false,
         "description": "Postive and negative training and validation graph data filepaths.",
         "properties": {
            "train_data": {
               "$ref": "#/$defs/PosNegData",
               "description": "Positive and negative graph data for ML training."
            },
            "valid_data": {
               "$ref": "#/$defs/PosNegData",
               "description": "Positive and negative graph data for ML validation."
            }
         },
         "required": [],
         "title": "TrainValidData",
         "type": "object"
      },
      "Upload": {
         "additionalProperties": false,
         "description": "Configuration for uploading to Amazon S3 bucket.",
         "properties": {
            "extra_args": {
               "description": "Extra keyword arguments (**kwargs).",
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "s3_bucket": {
               "description": "Bucket name.",
               "type": "string"
            },
            "s3_bucket_dir": {
               "description": "Bucket path.",
               "type": "string"
            }
         },
         "required": [],
         "title": "Upload",
         "type": "object"
      }
   },
   "$id": "https://w3id.org/neat_schema",
   "$schema": "http://json-schema.org/draft-07/schema#",
   "additionalProperties": true,
   "metamodel_version": "1.7.0",
   "properties": {
      "graph_data": {
         "$ref": "#/$defs/GraphDataConfiguration",
         "description": "Configuration for graph data."
      }
   },
   "required": [],
   "title": "NEAT_schema",
   "type": "object",
   "version": null
}
